# This starter workflow is for a CMake project running on multiple platforms. There is a different starter workflow if you just want a single platform.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-single-platform.yml
name: CMake on multiple platforms

env:
  QT_VERSION: "6.6.0"
  PLUGIN_NAME: AdventOfCode
  
on:
  push:
    branches-ignore:
      - master

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      # Set fail-fast to false to ensure that feedback is delivered for all matrix combinations. Consider changing this to true when your workflow is stable.
      fail-fast: false

      # Set up a matrix to run the following 3 configurations:
      # 1. <Windows, Release, latest MSVC compiler toolchain on the default runner image, default generator>
      # 2. <Linux, Release, latest GCC compiler toolchain on the default runner image, default generator>
      # 3. <Linux, Release, latest Clang compiler toolchain on the default runner image, default generator>
      #
      # To add more build types (Release, Debug, RelWithDebInfo, etc.) customize the build_type list.
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        build_type: [Release]
        c_compiler: [gcc, clang]
        include:
          - os: windows-latest
            c_compiler: gcc
            cpp_compiler: g++
          - os: ubuntu-latest
            c_compiler: gcc
            cpp_compiler: g++
          - os: macos-latest
            c_compiler: clang
            cpp_compiler: clang++
        exclude:
          - os: windows-latest
            c_compiler: clang
          - os: ubuntu-latest
            c_compiler: clang
          - os: macos-latest
            c_compiler: gcc

    steps:
    - uses: actions/checkout@v3

    - name: Set reusable strings
      # Turn repeated input strings (such as the build output directory) into step outputs. These step outputs can be used throughout the workflow file.
      id: strings
      shell: bash
      run: |
        echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"

    - name: Install Qt for Windows
      if: startsWith(matrix.os, 'windows')
      uses: jurplel/install-qt-action@v3
      with:
        aqtversion: '==3.1.*'
        version: ${{ env.QT_VERSION }}
        host: 'windows'
        target: 'desktop'
        arch: 'win64_mingw'

    - name: Install Qt For Ubuntu
      if: startsWith(matrix.os, 'ubuntu')
      uses: jurplel/install-qt-action@v3
      with:
        aqtversion: '==3.1.*'
        version: ${{ env.QT_VERSION }}
        host: 'linux'
        target: 'desktop'
        arch: 'gcc_64'

    - name: Install Qt for MacOS
      if: startsWith(matrix.os, 'macos')
      uses: jurplel/install-qt-action@v3
      with:
        aqtversion: '==3.1.*'
        version: ${{ env.QT_VERSION }}
        host: 'mac'
        target: 'desktop'
        arch: 'clang_64'
        
    - name: Install dependencies on windows
      if: startsWith(matrix.os, 'windows')
      run: |
          choco install ninja
          ninja --version
          cmake --version
          
    - name: Install dependencies on ubuntu
      if: startsWith(matrix.os, 'ubuntu')
      run: |
          sudo apt-get update
          sudo apt-get install ninja-build
          ninja --version
          cmake --version
          gcc --version
     
    - name: Install dependencies on macos
      if: startsWith(matrix.os, 'macos')
      run: |
          brew install p7zip ninja
          ninja --version
          cmake --version
          
    - name: Configure
      run: >
        cmake -B ${{ steps.strings.outputs.build-output-dir }}
        -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
        -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
        -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
        -S ${{ github.workspace }}
        -G "Ninja"
            
    - name: Build
      # Build your program with the given configuration. Note that --config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
      run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }}
    
    - name: Install Strip
      run: cmake --install ${{ steps.strings.outputs.build-output-dir }} --strip
    
    - name: Pack
      run: |
          ls -laR
          7z a ${{ matrix.os }}.7z ${{ steps.strings.outputs.build-output-dir }}
      
    - name: Upload
      uses: actions/upload-artifact@v3
      with:
        path: ./${{ matrix.os }}.7z
        name: ${{ matrix.os }}.7z

    - name: Test
      working-directory: ${{ steps.strings.outputs.build-output-dir }}
      # Execute tests defined by the CMake configuration. Note that --build-config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ctest --build-config ${{ matrix.build_type }}
